# 当有代码推送到 main 分支时，自动触发此流水线
on:
  push:
    branches: [ "main" ]

jobs:
  # 定义一个统一的“构建和部署”任务，将所有步骤放在一起
  build-and-deploy:
    runs-on: ubuntu-latest

    steps:
    # 第1步：下载GitHub代码
    - name: Checkout Code
      uses: actions/checkout@v4

    # === 后端构建 ===
    - name: Set up JDK 21
      uses: actions/setup-java@v4
      with:
        java-version: '21'
        distribution: 'temurin'
    - name: Build Backend
      run: mvn -f bicycle_sharing/springboot/pom.xml clean package -DskipTests

    # === 前端构建 ===
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
    - name: Build Frontend
      working-directory: ./bicycle_sharing/vue
      run: |
        npm install
        npm run build

    # === 统一上传 ===
    - name: Upload Artifacts to ECS
      uses: appleboy/scp-action@master
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USER }}
        password: ${{ secrets.ECS_PASSWORD }}
        source: "bicycle_sharing/springboot/target/springboot-0.0.1-SNAPSHOT.jar,bicycle_sharing/vue/dist"
        target: "/tmp/deployment" # 先上传到一个临时目录

    # === 在服务器上执行部署和重启脚本 ===
    - name: Deploy and Restart Services on ECS
      uses: appleboy/ssh-action@master
      with:
        host: ${{ secrets.ECS_HOST }}
        username: ${{ secrets.ECS_USER }}
        password: ${{ secrets.ECS_PASSWORD }}
        script: |
          # 1. 准备目录
          mkdir -p /app
          mkdir -p /var/www

          # 2. 部署前端：先删除旧的，再移动新的，保证原子性
          rm -rf /var/www/dist
          mv /tmp/deployment/dist /var/www/

          # 3. 部署后端：杀掉旧进程，移动新jar包
          PID=$(pgrep -f 'springboot-0.0.1-SNAPSHOT.jar')
          if [ -n "$PID" ]; then
            kill -9 $PID
            echo "Killed old process with PID: $PID"
          fi
          mv /tmp/deployment/springboot-0.0.1-SNAPSHOT.jar /app/
          
          # 4. 在后台启动新的后端程序
          cd /app
          nohup java -jar springboot-0.0.1-SNAPSHOT.jar > backend.log 2>&1 &
          echo "Started new backend process."
          
          # 5. 重新加载Nginx配置，使更改生效
          systemctl reload nginx
          echo "Nginx reloaded."
          
          # 6. 清理临时上传目录
          rm -rf /tmp/deployment
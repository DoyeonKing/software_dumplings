# 当有代码推送到 main 分支时，自动触发此流水线
on:
  push:
    branches: [ "main" ]

jobs:
  # --- 任务一：部署后端 ---
  deploy-backend:
    runs-on: ubuntu-latest
    steps:
      - name: 1. 下载代码
        uses: actions/checkout@v4

      - name: 2. 设置Java 21环境
        uses: actions/setup-java@v4
        with:
          java-version: '21'
          distribution: 'temurin'
          cache: 'maven'  # 缓存Maven依赖，加速构建

      - name: 检查运行器磁盘空间
        run: |
          df -h
          available_space=$(df -h / | grep -v Filesystem | awk '{print $4}')
          echo "可用磁盘空间: $available_space"
          min_space=10G
          if [[ $(echo "$available_space < $min_space" | tr -d '[:alpha:]' | bc -l) -gt 0 ]]; then
            echo "错误: 可用磁盘空间小于 $min_space."
            exit 1
          else
            echo "有足够的磁盘空间可用."
          fi

      - name: 3. 清理不必要的文件和缓存
        run: |
          sudo apt-get clean
          sudo rm -rf /usr/share/dotnet/sdk/* /usr/local/lib/ruby/gems/*/cache
          df -h

      - name: 4. 打包后端项目 (使用内存限制)
        env:
          MAVEN_OPTS: -Xmx2048m
        run: mvn -f bicycle_sharing/springboot/pom.xml clean package -DskipTests
        # 打包后验证JAR包存在，避免空包上传
        continue-on-error: false  # 打包失败直接终止

      - name: 验证后端JAR包完整性
        run: |
          if [ ! -f "bicycle_sharing/springboot/target/springboot-0.0.1-SNAPSHOT.jar" ]; then
            echo "错误：后端JAR包打包失败，文件不存在"
            exit 1
          else
            echo "后端JAR包存在，大小为: $(du -h bicycle_sharing/springboot/target/springboot-0.0.1-SNAPSHOT.jar)"
          fi

      - name: 5. 上传后端Jar包
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          password: ${{ secrets.ECS_PASSWORD }}
          source: "bicycle_sharing/springboot/target/springboot-0.0.1-SNAPSHOT.jar"
          target: "/app"
          strip_components: 3
          timeout: 30s

      - name: 6. 优雅重启后端服务
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          password: ${{ secrets.ECS_PASSWORD }}
          timeout: 5m
          script: |
            echo "准备重启后端服务..."
            APP_DIR="/app"
            LOG_FILE="$APP_DIR/backend.log"
            JAR_FILE="$APP_DIR/springboot-0.0.1-SNAPSHOT.jar"
            cd $APP_DIR

            # 停止服务（优化：使用kill -15优雅终止，支持Spring Boot优雅停机）
            PID=$(pgrep -f "$JAR_FILE")
            if [ -n "$PID" ]; then
              echo "应用正在运行，PID: $PID，发送优雅停止信号..."
              kill -15 $PID  # 优先使用SIGTERM信号
              for i in {1..30}; do
                if ! ps -p $PID > /dev/null; then
                  echo "应用已成功停止"
                  break
                fi
                echo "等待应用停止...($i/30)"
                sleep 1
              done
              if ps -p $PID > /dev/null; then
                echo "强制终止应用..."
                kill -9 $PID
                sleep 2
              fi
            else
              echo "应用未运行，无需停止"
            fi

            # 清理旧日志（保留最近3个旧日志，避免磁盘占满）
            if [ -f "$LOG_FILE" ]; then
              mv "$LOG_FILE" "$LOG_FILE.old.$(date +%Y%m%d%H%M)"
              echo "旧日志已重命名为 $LOG_FILE.old.$(date +%Y%m%d%H%M)"
            fi
            # 保留最近3个旧日志，删除更早的
            ls -tp $APP_DIR/backend.log.old.* | grep -v '/$' | tail -n +4 | xargs -I {} rm -- {}

            # 启动应用（新增：显式指定Spring Boot环境为prod，避免开发配置干扰）
            echo "启动应用，设置最大堆内存为2GB..."
            nohup java -Xmx2048m -jar $JAR_FILE --spring.profiles.active=prod > $LOG_FILE 2>&1 &

            # 等待启动（优化：增加端口监听检查，更可靠）
            echo "等待应用启动..."
            for i in {1..60}; do
              if grep -q "Started SpringbootApplication" $LOG_FILE || nc -z localhost 8080; then
                echo "应用已成功启动！"
                exit 0
              fi
              echo "检查启动状态...($i/60)"
              sleep 1
            done

            echo "错误: 应用启动超时！"
            tail -n 200 $LOG_FILE
            exit 1

  # --- 任务二：部署前端 ---
  deploy-frontend:
    runs-on: ubuntu-latest
    needs: deploy-backend
    steps:
      - name: 1. 下载代码
        uses: actions/checkout@v4

      - name: 2. 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'  # 缓存npm依赖，加速构建
          cache-dependency-path: bicycle_sharing/vue/package-lock.json

      - name: 3. 打包前端项目（注入生产环境变量）
        working-directory: ./bicycle_sharing/vue
        env:
          # 关键：注入生产环境后端接口地址（从GitHub Secrets读取）
          VITE_BASE_API: ${{ secrets.FRONTEND_API_URL }}  # 需在GitHub仓库设置此Secret
        run: |
          npm install --registry=https://registry.npm.taobao.org  # 使用国内镜像加速
          npm run build
          # 验证dist目录存在
          if [ ! -d "dist" ]; then
            echo "错误：前端打包失败，dist目录不存在"
            exit 1
          else
            echo "前端打包成功，dist目录大小: $(du -sh dist)"
          fi

      - name: 4. 清理服务器旧前端文件
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          password: ${{ secrets.ECS_PASSWORD }}
          script: |
            rm -rf /var/www/dist/*  # 更安全的删除方式（保留dist目录）
            echo "旧前端文件已清理"

      - name: 5. 上传新前端文件
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          password: ${{ secrets.ECS_PASSWORD }}
          source: "bicycle_sharing/vue/dist/*"  # 上传dist内的所有文件（不含dist目录本身）
          target: "/var/www/dist"  # 直接放到/var/www/dist下，避免多层目录
          strip_components: 3
          timeout: 30s

      - name: 6. 配置Nginx（自动生成缺失的配置文件）
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          password: ${{ secrets.ECS_PASSWORD }}
          script: |
            # 检查Nginx配置目录，若不存在则创建
            if [ ! -d "/etc/nginx/conf.d" ]; then
              sudo mkdir -p /etc/nginx/conf.d
            fi
            # 写入前端+后端代理配置（解决之前配置文件缺失问题）
            sudo tee /etc/nginx/conf.d/bicycle-sharing.conf <<-'EOF'
              server {
                listen 80;
                server_name _;  # 匹配所有域名/IP

                # 前端静态文件
                root /var/www/dist;
                index index.html;

                # 前端路由支持（刷新不404）
                location / {
                  try_files $uri $uri/ /index.html;
                }

                # 后端接口代理（匹配前端VITE_BASE_API）
                location /api/ {
                  proxy_pass http://localhost:8080/;  # 转发到后端8080，去掉/api前缀
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                }
              }
            EOF
            # 检查Nginx配置并重启
            sudo nginx -t && sudo systemctl restart nginx
            echo "Nginx配置已更新并重启"

      - name: 7. 验证前端文件上传成功
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.ECS_HOST }}
          username: ${{ secrets.ECS_USER }}
          password: ${{ secrets.ECS_PASSWORD }}
          script: |
            if [ -f "/var/www/dist/index.html" ]; then
              echo "前端文件上传成功，index.html存在"
            else
              echo "错误：前端文件上传失败，index.html不存在"
              exit 1
            fi